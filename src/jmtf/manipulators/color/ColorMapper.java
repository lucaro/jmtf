/**
 * Java Motion Tracking Framework
 */
package jmtf.manipulators.color;

import jmtf.AbstractImageManipulator;
import jmtf.ImageSource;
import jmtf.JMTFImage;

/**
 * @author Luca Rossetto
 *
 */
public class ColorMapper extends AbstractImageManipulator {

	private int[] colors;
	public static final int[] _16_COLORS = new int[]{0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xC0C0C0, 0x808080, 0xFF0000, 0x00FF00, 0xFFFF00, 0x0000FF, 0xFF00FF, 0x00FFFF, 0xFFFFFF};
	public static final int[] WEB_COLORS = new int[]{0x000000 ,0x333333 ,0x666666 ,0x999999 ,0xcccccc ,0xffffff, 0x000033 ,0x000066 ,0x000099 ,0x0000cc ,0x0000ff, 0x333366 ,0x333399 ,0x3333cc ,0x3333ff, 0x666699 ,0x6666cc ,0x6666ff, 0x9999cc ,0x9999ff, 0xccccff,
		0x003300 ,0x006600 ,0x009900 ,0x00cc00 ,0x00ff00, 0x336633 ,0x339933 ,0x33cc33 ,0x33ff33, 0x669966 ,0x66cc66 ,0x66ff66, 0x99cc99 ,0x99ff99, 0xccffcc,
		0x330000 ,0x660000 ,0x990000 ,0xcc0000 ,0xff0000, 0x663333 ,0x993333 ,0xcc3333 ,0xff3333, 0x996666 ,0xcc6666 ,0xff6666, 0xcc9999 ,0xff9999, 0xffcccc,
		0x330033 ,0x330066 ,0x330099 ,0x3300cc ,0x3300ff, 0x660033 ,0x660066 ,0x660099 ,0x6600cc ,0x6600ff, 0x990033 ,0x990066 ,0x990099 ,0x9900cc ,0x9900ff,
		0xcc0033 ,0xcc0066 ,0xcc0099 ,0xcc00cc ,0xcc00ff, 0xff0033 ,0xff0066 ,0xff0099 ,0xff00cc ,0xff00ff, 0x663366 ,0x663399 ,0x6633cc ,0x6633ff, 0x993366 ,0x993399 ,0x9933cc ,0x9933ff, 0xcc3366 ,0xcc3399 ,0xcc33cc ,0xcc33ff, 0xff3366 ,0xff3399 ,0xff33cc ,0xff33ff,0x996699 ,0x9966cc ,0x9966ff,0xcc6699 ,0xcc66cc ,0xcc66ff,0xff6699 ,0xff66cc ,0xff66ff,0xcc99cc ,0xcc99ff,0xff99cc ,0xff99ff,0xffccff,
		0x003333 ,0x003366 ,0x003399 ,0x0033cc ,0x0033ff,0x006633 ,0x006666 ,0x006699 ,0x0066cc ,0x0066ff,0x009933 ,0x009966 ,0x009999 ,0x0099cc ,0x0099ff,0x00cc33 ,0x00cc66 ,0x00cc99 ,0x00cccc ,0x00ccff,0x00ff33 ,0x00ff66 ,0x00ff99 ,0x00ffcc ,0x00ffff,0x336666 ,0x336699 ,0x3366cc ,0x3366ff,0x339966 ,0x339999 ,0x3399cc ,0x3399ff,0x33cc66 ,0x33cc99 ,0x33cccc ,0x33ccff,0x33ff66 ,0x33ff99 ,0x33ffcc ,0x33ffff,0x669999 ,0x6699cc ,0x6699ff,0x66cc99 ,0x66cccc ,0x66ccff,0x66ff99 ,0x66ffcc ,0x66ffff,0x99cccc ,0x99ccff,0x99ffcc ,0x99ffff,0xccffff,
		0x333300 ,0x336600 ,0x339900 ,0x33cc00 ,0x33ff00,0x663300 ,0x666600 ,0x669900 ,0x66cc00 ,0x66ff00,0x993300 ,0x996600 ,0x999900 ,0x99cc00 ,0x99ff00,0xcc3300 ,0xcc6600 ,0xcc9900 ,0xcccc00 ,0xccff00,0xff3300 ,0xff6600 ,0xff9900 ,0xffcc00 ,0xffff00,0x666633 ,0x669933 ,0x66cc33 ,0x66ff33,0x996633 ,0x999933 ,0x99cc33 ,0x99ff33,0xcc6633 ,0xcc9933 ,0xcccc33 ,0xccff33,0xff6633 ,0xff9933 ,0xffcc33 ,0xffff33,0x999966 ,0x99cc66 ,0x99ff66,0xcc9966 ,0xcccc66 ,0xccff66,0xff9966 ,0xffcc66 ,0xffff66,0xcccc99 ,0xccff99,0xffcc99 ,0xffff99,0xffffcc,};
	
	public ColorMapper(ImageSource source, int[] colors) {
		super(source);
		this.colors = colors;
	}


	@Override
	public void manipulate(JMTFImage input) {

		//int[] pixels = input.getPixels();
		//for(int i = 0; i < pixels.length; ++i){
		for (int x = input.getROI().minX; x <= input.getROI().maxX; ++x) {
			for (int y = input.getROI().minY; y <= input.getROI().maxY; ++y) {
			int best_dist = Integer.MAX_VALUE, dist, best_color = 0, col = input.getPixel(x, y);
				for(int color : this.colors){
					dist = JMTFImage.squaredColorDistance(color, col);
					if(dist < best_dist){
						best_dist = dist;
						best_color = color;
					}
				}
				//pixels[i] = best_color;
				input.setPixel(x, y, best_color);
			}
		}

	}



	public void setColors(int[] colors) {
		this.colors = colors;
	}

}
